{"version":3,"sources":["const.ts","components/TableHeader/index.tsx","components/Flag/index.tsx","types.ts","redux/actions/drawer.ts","components/TablePaginationActions/index.tsx","contextAPI.tsx","components/ThemedLink/index.tsx","components/ThemedButton/index.tsx","components/TableContent/index.tsx","redux/actions/product.ts","components/ResultTable/index.tsx","components/SearchBar/index.tsx","components/ThemeSwitchBtn/index.tsx","components/InCartList/index.tsx","components/RightDrawer/index.tsx","components/ShoppingCartBadge/index.tsx","components/ShoppingCartDrawer/index.tsx","components/GameBtn/index.tsx","components/MyAppBar/index.tsx","components/NavBar/index.tsx","hooks/useFetch.tsx","redux/actions/country.ts","pages/Home.tsx","components/ThemedChip/index.tsx","pages/Country.tsx","quizzGameComponents/Options/index.tsx","quizzGameComponents/Quizz/index.tsx","quizzGameComponents/QuizzAndOptions/index.tsx","pages/QuizGame.tsx","Routes.tsx","App.tsx","serviceWorker.ts","redux/reducers/product.ts","redux/reducers/drawer.ts","redux/reducers/country.ts","redux/reducers/index.ts","redux/sagas/product.ts","redux/sagas/index.ts","redux/store.ts","index.tsx"],"names":["secondary","blue","header","useStyles","makeStyles","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","width","tableHead","tableCell","fontWeight","fontSize","TableHeader","handleClick","sortedAsc","sortBy","classes","TableHead","className","TableRow","map","s","TableCell","key","id","sortDirection","TableSortLabel","active","direction","onClick","toUpperCase","displayName","React","memo","flag","borderRadius","Flag","flagUrl","name","src","alt","DialogType","SortedAscType","toggleDrawer","drawerOpen","type","payload","TablePaginationActions","count","page","rowsPerPage","onChangePage","theme","onChangeRowsPerPage","useTheme","IconButton","event","disabled","aria-label","Math","ceil","max","themes","color","teal","background","buttonColor","disabledBtnBackground","disabledBtnColor","red","deepPurple","green","indigo","brown","blueGrey","amber","cyan","pink","createContext","switchTheme","ThemedLink","content","url","useContext","ThemeContext","to","style","textDecoration","ThemedButton","btnId","href","children","Button","backgroundColor","verticalAlign","borderBottom","tableBody","textAlign","unorderedList","listStyle","TableContent","countriesList","dispatch","useDispatch","useState","setPage","setRowsPerPage","product","useSelector","state","inCart","emptyRows","useMemo","min","length","handleChangePage","useCallback","newPage","handleChangeRowsPerPage","TableBody","slice","row","alpha3Code","capital","languages","l","population","toLocaleString","regionalBlocs","r","find","p","Boolean","price","random","toFixed","addProduct","handleAddProduct","colSpan","TableFooter","rowsPerPageOptions","label","value","root","table","tableLayout","minHeight","maxWidth","ResultTable","countries","TableContainer","Table","display","search","shape","fade","palette","common","white","marginRight","spacing","marginTop","marginLeft","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","SearchBar","handleSearch","InputBase","onChange","placeholder","input","inputProps","ThemeSwitchBtn","Tooltip","title","listItemValue","paddingLeft","InCartList","List","ListItem","ListItemIcon","ListItemText","primary","removeProduct","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","RightDrawer","drawer","handleDrawerOpen","Drawer","variant","anchor","open","paper","Divider","shoppingBasketDrawer","shoppingCartButton","right","toolBar","ShoppingCartBadge","Badge","badgeContent","ShoppingCartDrawer","GameBtn","easing","sharp","duration","leavingScreen","MyAppBar","AppBar","clsx","Toolbar","NavBar","handleChange","useFetch","filteredCountries","setFilteredCountries","data","useEffect","isEmpty","fetch","then","resp","json","myJson","catch","error","pending","fetchCountriesError","filteredData","filter","c","toLowerCase","includes","sortFunc","reverse","container","Home","setSortedAsc","setSearch","setSortBy","e","target","handleColumnChange","ThemedChip","Chip","flexGrow","maxHeight","appBar","upperCard","pos","marginBottom","media","paddingTop","upperPaper","text","lowerPaper","lowerCard","Country","useParams","history","useHistory","country","handleGoBack","goBack","Container","Grid","item","xs","Paper","Card","CardHeader","subheader","nativeName","region","subregion","CardMedia","image","area","currencies","icon","Avatar","symbol","_","first","code","CardContent","Typography","borders","avatar","Options","Quizz","QuizzAndOptions","quizz","option1","option2","option3","option4","QuizzGame","setQuizz","correct","setCorrect","incorrect1","setIncorrect1","incorrect2","setIncorrect2","incorrect3","setIncorrect3","options","shuffledOptions","shuffle","Routes","randomTheme","setContext","current","context","Provider","exact","path","component","App","window","location","hostname","match","action","index","findIndex","splice","defaultState","createRootReducer","combineReducers","saveState","closeDrawer","select","localStorage","setItem","JSON","stringify","put","takeLatest","rootSaga","all","productSagas","initState","ui","dialogOpen","store","initialState","sagaMiddleware","createSagaMiddleware","middlewares","thunk","composeEnhancers","compose","parse","getItem","createStore","applyMiddleware","run","makeStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd0aac52.chunk.js","sourcesContent":["import blue from '@material-ui/core/colors/blue'\n\nimport { HeaderTitle } from './types'\n\nexport const primary = blue[700]\nexport const secondary = blue[100]\nexport const header: HeaderTitle = [\n  'flag',\n  'name',\n  'capital',\n  'languages',\n  'population',\n  'regionalBlocs',\n]\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\n\nimport { SingleHeader } from '../../types'\nimport { header } from '../../const'\n\nconst useStyles = makeStyles({\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n  tableHead: {},\n  tableCell: {\n    fontWeight: 'bold',\n    fontSize: '15px',\n  },\n})\n\ntype HeaderProps = {\n  handleClick(event: React.MouseEvent<HTMLTableDataCellElement>): void\n  sortedAsc: boolean\n  sortBy: SingleHeader\n}\n\nfunction TableHeader({ handleClick, sortedAsc, sortBy }: HeaderProps) {\n  const classes = useStyles()\n  return (\n    <TableHead className={classes.tableHead}>\n      <TableRow>\n        {header.map(s => (\n          <TableCell\n            className={classes.tableCell}\n            key={s}\n            id={s}\n            sortDirection={sortBy === s && (sortedAsc ? 'asc' : 'desc')}\n          >\n            <TableSortLabel\n              id={s}\n              active={sortBy === s}\n              direction={sortBy === s ? (sortedAsc ? 'asc' : 'desc') : 'asc'}\n              onClick={handleClick}\n            >\n              {s.toUpperCase()}\n              {sortBy === s ? (\n                <span className={classes.visuallyHidden}>\n                  {sortedAsc ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n        <TableCell></TableCell>\n      </TableRow>\n    </TableHead>\n  )\n}\n\nTableHeader.displayName = 'TableHeader'\n\nexport default React.memo(TableHeader)\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  flag: {\n    width: '100px',\n    height: 'auto',\n    borderRadius: '30%',\n  },\n})\n\ntype FlagProps = {\n  flagUrl: string\n  name: string\n}\n\nfunction Flag({ flagUrl, name }: FlagProps) {\n  const classes = useStyles()\n  return <img className={classes.flag} src={flagUrl} alt={name} />\n}\n\nFlag.displayName = 'Flag'\n\nexport default React.memo(Flag)\n","// Country type\nexport type Language = {\n  name: string\n}\nexport type RegionalBloc = {\n  name: string\n}\nexport type Currency = {\n  code: string\n  name: string\n  symbol: string\n}\nexport type Country = {\n  flag: string\n  name: string\n  languages: Language[]\n  population: number\n  regionalBlocs: RegionalBloc[]\n  alpha3Code: string\n  capital: string\n  currencies: Currency[]\n  region: string\n  subregion: string\n  nativeName: string\n  borders: string[]\n  area: number\n}\nexport type NeighborCountry = {\n  flag: string\n  name: string\n  alpha3Code: string\n}\nexport type HeaderTitle = SingleHeader[]\nexport type SingleHeader = string\n\n// Theme Color type\nexport type Color = string\nexport type ThemeType = {\n  name: string\n  color: Color\n  background: Color\n  buttonColor: Color\n  disabledBtnBackground: Color\n  disabledBtnColor: Color\n}\n\n// Action types\nexport const FETCH_COUNTRIES = 'FETCH_COUNTRIES'\nexport const FETCH_A_COUNTRY = 'FETCH_A_COUNTRY'\n\nexport const FETCH_COUNTRIES_PENDING = 'FETCH_COUNTRIES_PENDING'\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS'\nexport const FETCH_COUNTRIES_ERROR = 'FETCH_COUNTRIES_ERROR'\n\nexport const ADD_PRODUCT = 'ADD_PRODUCT'\nexport const REMOVE_PRODUCT = 'REMOVE_PRODUCT'\nexport const TOGGLE_DIALOG = 'TOGGLE_DIALOG'\n\n// Enum\nexport enum DialogType {\n  SignIn = 'signIn',\n  SignUp = 'signUp',\n}\n// Search\nexport type Search = string\nexport const SET_SEARCH = 'SET_SEARCH'\nexport type SearchAction = {\n  type: typeof SET_SEARCH\n  payload: {\n    search: Search\n  }\n}\n\n// Sorted Ascending\nexport type SortedAsc = boolean\nexport const SET_SORTEDASC = 'SET_SORTEDASC'\nexport type SetSortedAscAction = {\n  type: typeof SET_SORTEDASC\n  payload: {\n    sortedAsc: SortedAsc\n  }\n}\nexport enum SortedAscType {\n  Asc = 'Ascending',\n  Desc = 'Descending',\n}\nexport type SortedAscState = {\n  state: {\n    [key in SortedAscType]?: boolean\n  }\n}\n// Sort by column name\nexport type SortBy = SingleHeader\nexport const SET_SORTBY = 'SET_SORTBY'\nexport type SetSortByAction = {\n  type: typeof SET_SORTBY\n  payload: {\n    sortBy: SortBy\n  }\n}\n\n// A product\nexport type Product = {\n  id: string\n  name: string\n  flagUrl: string\n  price: number\n}\n\nexport type AddProductAction = {\n  type: typeof ADD_PRODUCT\n  payload: {\n    product: Product\n  }\n}\n\nexport type RemoveProductAction = {\n  type: typeof REMOVE_PRODUCT\n  payload: {\n    product: Product\n  }\n}\n\nexport type ToggleDialogAction = {\n  type: typeof TOGGLE_DIALOG\n  payload: {\n    dialog: DialogType\n  }\n}\n\nexport type FetchCountriesAction = {\n  type: typeof FETCH_COUNTRIES\n  payload: {\n    countries: Country[]\n  }\n}\n\nexport type FetchACountryAction = {\n  type: typeof FETCH_A_COUNTRY\n  payload: {\n    country: Country\n  }\n}\n\nexport type FetchCountriesPending = {\n  type: typeof FETCH_COUNTRIES_PENDING\n  payload: {\n    pending: boolean\n  }\n}\nexport type FetchCountriesSuccess = {\n  type: typeof FETCH_COUNTRIES_SUCCESS\n  payload: {\n    countries: Country[]\n  }\n}\nexport type FetchCountriesError = {\n  type: typeof FETCH_COUNTRIES_ERROR\n  payload: {\n    error: string\n  }\n}\n\nexport type UiActions = ToggleDialogAction\n\n// Use this ProductActions union in reducer\nexport type ProductActions = AddProductAction | RemoveProductAction\n\n// Use this CountryActions union in reducer\nexport type CountryActions =\n  | FetchACountryAction\n  | FetchCountriesAction\n  | FetchCountriesError\n  | FetchCountriesPending\n  | FetchCountriesSuccess\n// | FetchCountries\n\nexport type CountryState = {\n  pending: boolean\n  countries: Country[]\n  error: string\n}\nexport type ProductState = {\n  inCart: Product[]\n}\nexport type SearchState = {\n  search: Search\n}\n// Using dynamic keys from an enum\nexport type UiState = {\n  dialogOpen: {\n    [key in DialogType]?: boolean\n  }\n}\n\nexport type AppState = {\n  countriesList: CountryState\n  drawer: DrawerState\n  product: ProductState\n  ui: UiState\n}\n\n// Toggle Drawer\nexport const TOGGLE_DRAWER = 'TOGGLE_DRAWER'\n\nexport type DrawerState = {\n  drawerOpen: boolean\n}\nexport type ToggleDrawerAction = {\n  type: typeof TOGGLE_DRAWER\n  payload: {\n    drawerOpen: boolean\n  }\n}\n","import { TOGGLE_DRAWER, ToggleDrawerAction } from '../../types'\n\nexport function toggleDrawer(drawerOpen: boolean): ToggleDrawerAction {\n  return {\n    type: TOGGLE_DRAWER,\n    payload: {\n      drawerOpen,\n    },\n  }\n}\n","import React from 'react'\nimport { useTheme } from '@material-ui/core/styles'\nimport TableCell from '@material-ui/core/TableCell'\nimport IconButton from '@material-ui/core/IconButton'\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport LastPageIcon from '@material-ui/icons/LastPage'\n\ntype TablePaginationActionsProps = {\n  count: number\n  page: number\n  rowsPerPage: number\n  onChangePage(\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ): void\n  onChangeRowsPerPage(event: React.MouseEvent<HTMLButtonElement>): void\n  rowsPerPageOptions: number | object\n}\n\nconst TablePaginationActions = ({\n  count,\n  page,\n  rowsPerPage,\n  onChangePage,\n  onChangeRowsPerPage,\n}: TablePaginationActionsProps) => {\n  const theme = useTheme()\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, 0)\n  }\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page - 1)\n  }\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <>\n      <TableCell>\n        <IconButton\n          onClick={handleFirstPageButtonClick}\n          disabled={page === 0}\n          aria-label=\"first page\"\n        >\n          {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n        </IconButton>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleLastPageButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"last page\"\n        >\n          {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n        </IconButton>\n      </TableCell>\n      <TableCell></TableCell>\n      <TableCell></TableCell>\n      <TableCell></TableCell>\n      <TableCell></TableCell>\n      <TableCell></TableCell>\n      <TableCell></TableCell>\n    </>\n  )\n}\n\nTablePaginationActions.displayName = 'TablePaginationActions'\n\nexport default React.memo(TablePaginationActions)\n","import React from 'react'\nimport teal from '@material-ui/core/colors/teal'\nimport blue from '@material-ui/core/colors/blue'\nimport red from '@material-ui/core/colors/red'\nimport deepPurple from '@material-ui/core/colors/deepPurple'\nimport green from '@material-ui/core/colors/green'\nimport indigo from '@material-ui/core/colors/indigo'\nimport brown from '@material-ui/core/colors/brown'\nimport blueGrey from '@material-ui/core/colors/blueGrey'\nimport amber from '@material-ui/core/colors/amber'\nimport cyan from '@material-ui/core/colors/cyan'\nimport pink from '@material-ui/core/colors/pink'\n\nimport { ThemeType } from './types'\n\nexport const themes: ThemeType[] = [\n  {\n    name: 'teal',\n    color: teal[50],\n    background: teal[500],\n    buttonColor: teal[700],\n    disabledBtnBackground: teal[100],\n    disabledBtnColor: teal[300],\n  },\n  {\n    name: 'blue',\n    color: blue[50],\n    background: blue[500],\n    buttonColor: blue[700],\n    disabledBtnBackground: blue[100],\n    disabledBtnColor: blue[300],\n  },\n  {\n    name: 'red',\n    color: red[500],\n    background: red[100],\n    buttonColor: red[700],\n    disabledBtnBackground: red[50],\n    disabledBtnColor: red[100],\n  },\n  {\n    name: 'deepPurple',\n    color: deepPurple[50],\n    background: deepPurple[500],\n    buttonColor: deepPurple[700],\n    disabledBtnBackground: deepPurple[100],\n    disabledBtnColor: deepPurple[300],\n  },\n  {\n    name: 'green',\n    color: green[50],\n    background: green[500],\n    buttonColor: green[700],\n    disabledBtnBackground: green[100],\n    disabledBtnColor: green[300],\n  },\n  {\n    name: 'indigo',\n    color: indigo[50],\n    background: indigo[500],\n    buttonColor: indigo[700],\n    disabledBtnBackground: indigo[100],\n    disabledBtnColor: indigo[300],\n  },\n  {\n    name: 'brown',\n    color: brown[50],\n    background: brown[500],\n    buttonColor: brown[700],\n    disabledBtnBackground: brown[100],\n    disabledBtnColor: brown[300],\n  },\n  {\n    name: 'blueGrey',\n    color: blueGrey[50],\n    background: blueGrey[500],\n    buttonColor: blueGrey[700],\n    disabledBtnBackground: blueGrey[100],\n    disabledBtnColor: blueGrey[300],\n  },\n  {\n    name: 'amber',\n    color: amber[50],\n    background: amber[500],\n    buttonColor: amber[700],\n    disabledBtnBackground: amber[100],\n    disabledBtnColor: amber[300],\n  },\n  {\n    name: 'cyan',\n    color: cyan[50],\n    background: cyan[500],\n    buttonColor: cyan[700],\n    disabledBtnBackground: cyan[100],\n    disabledBtnColor: cyan[300],\n  },\n  {\n    name: 'pink',\n    color: pink[50],\n    background: pink[500],\n    buttonColor: pink[700],\n    disabledBtnBackground: pink[100],\n    disabledBtnColor: pink[300],\n  },\n]\n\nexport default React.createContext({\n  theme: themes[1],\n  switchTheme: () => {},\n})\n","import React, { FunctionComponent, useContext } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport ThemeContext from '../../contextAPI'\n\ntype Props = {\n  content: string\n  url: string\n}\nconst ThemedLink: FunctionComponent<Props> = ({ content, url }) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <Link to={url} style={{ color: theme.buttonColor, textDecoration: 'none' }}>\n      {content}\n    </Link>\n  )\n}\n\nThemedLink.displayName = 'ThemedLink'\n\nexport default React.memo(ThemedLink)\n","import React, { FunctionComponent, useContext } from 'react'\nimport Button from '@material-ui/core/Button'\n\nimport ThemeContext from '../../contextAPI'\n\ntype Props = {\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n  btnId: string\n  href?: string\n}\nconst ThemedButton: FunctionComponent<Props> = ({\n  btnId,\n  onClick,\n  href,\n  children,\n}) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <Button\n      id={btnId}\n      style={{ color: theme.color, backgroundColor: theme.background }}\n      onClick={onClick}\n      href={href}\n    >\n      {children}\n    </Button>\n  )\n}\n\nThemedButton.displayName = 'ThemedButton'\n\nexport default ThemedButton\n","import React, { useCallback, useMemo } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport Button from '@material-ui/core/Button'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Flag from '../Flag'\nimport { addProduct } from '../../redux/actions'\nimport TablePaginationActions from '../TablePaginationActions'\nimport { Product, Country, AppState } from '../../types'\nimport ThemedLink from '../ThemedLink'\nimport ThemedButton from '../ThemedButton'\n\nconst useStyles = makeStyles({\n  tableCell: {\n    verticalAlign: 'top',\n\n    borderBottom: '1',\n  },\n  tableBody: {\n    textAlign: 'center',\n  },\n  unorderedList: {\n    listStyle: 'none',\n    padding: '0',\n  },\n})\n\ntype TableContentProps = {\n  countriesList: Country[]\n}\nfunction TableContent({ countriesList }: TableContentProps) {\n  const dispatch = useDispatch()\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(7)\n  const classes = useStyles()\n  const product = useSelector((state: AppState) => state.product.inCart)\n  const emptyRows = useMemo(\n    () =>\n      rowsPerPage -\n      Math.min(rowsPerPage, countriesList.length - page * rowsPerPage),\n    [rowsPerPage, countriesList, page]\n  )\n  const handleChangePage = useCallback((event, newPage) => {\n    setPage(newPage)\n  }, [])\n\n  const handleChangeRowsPerPage = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      setRowsPerPage(6)\n      setPage(0)\n    },\n    []\n  )\n\n  const handleAddProduct = (id: string, name: string, flag: string) => {\n    const product: Product = {\n      id: id,\n      name: name,\n      flagUrl: flag,\n      price: +(Math.random() * 10).toFixed(2),\n    }\n    dispatch(addProduct(product))\n  }\n\n  return (\n    <>\n      <TableBody className={classes.tableBody}>\n        {(rowsPerPage > 0\n          ? countriesList.slice(\n            page * rowsPerPage,\n            page * rowsPerPage + rowsPerPage\n          )\n          : countriesList\n        ).map(row => (\n          <TableRow key={row.name}>\n            <TableCell className={classes.tableCell}>\n              <Flag flagUrl={row.flag} name={row.name} />\n            </TableCell>\n            <TableCell className={classes.tableCell}>\n              <p>\n                <ThemedLink\n                  url={`/countries/${row.alpha3Code}`}\n                  content={row.name}\n                />\n              </p>\n            </TableCell>\n            <TableCell className={classes.tableCell}>\n              <p>{row.capital}</p>\n            </TableCell>\n            <TableCell className={classes.tableCell}>\n              <ul className={classes.unorderedList}>\n                {row.languages.map(l => (\n                  <li key={l.name}>{l.name}</li>\n                ))}\n              </ul>\n            </TableCell>\n            <TableCell className={classes.tableCell}>\n              <p>{row.population.toLocaleString()}</p>\n            </TableCell>\n            <TableCell className={classes.tableCell}>\n              <ul className={classes.unorderedList}>\n                {row.regionalBlocs.map(r => (\n                  <li key={r.name}>{r.name}</li>\n                ))}\n              </ul>\n            </TableCell>\n            <TableCell className={classes.tableCell}>\n              {product.find(p => p.id === row.alpha3Code) && (\n                <Button disabled>Added</Button>\n              )}\n              {!Boolean(product.find(p => p.id === row.alpha3Code)) && (\n                <ThemedButton\n                  btnId=\"addProduct\"\n                  onClick={() =>\n                    handleAddProduct(row.alpha3Code, row.name, row.flag)\n                  }\n                >\n                  Add\n                </ThemedButton>\n              )}\n            </TableCell>\n          </TableRow>\n        ))}\n        {emptyRows > 0 && (\n          <TableRow style={{ height: 53 * emptyRows }}>\n            <TableCell colSpan={6} />\n          </TableRow>\n        )}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TablePaginationActions\n            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n            count={countriesList.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </TableRow>\n      </TableFooter>\n    </>\n  )\n}\n\nTableContent.displayName = 'TableContent'\n\nexport default React.memo(TableContent)\n","import {\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n  ProductActions,\n  Product,\n} from '../../types'\n\nexport function addProduct(product: Product): ProductActions {\n  return {\n    type: ADD_PRODUCT,\n    payload: {\n      product,\n    },\n  }\n}\n\nexport function removeProduct(product: Product): ProductActions {\n  return {\n    type: REMOVE_PRODUCT,\n    payload: {\n      product,\n    },\n  }\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableContainer from '@material-ui/core/TableContainer'\n\nimport TableHeader from '../TableHeader'\nimport TableContent from '../TableContent'\nimport { Country, SingleHeader } from '../../types'\n\ntype ResultTableProps = {\n  countries: Country[]\n  handleClick(event: React.MouseEvent<HTMLTableDataCellElement>): void\n  sortedAsc: boolean\n  sortBy: SingleHeader\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'absolute',\n    top: '70px',\n  },\n  table: {\n    tableLayout: 'auto',\n    minHeight: '85vh',\n    maxWidth: '100vw',\n  },\n})\n\nconst ResultTable = ({\n  countries,\n  handleClick,\n  sortedAsc,\n  sortBy,\n}: ResultTableProps) => {\n  const classes = useStyles()\n  return (\n    <TableContainer className={classes.root}>\n      <Table className={classes.table} aria-label=\"custome pagination table\">\n        <TableHeader\n          sortedAsc={sortedAsc}\n          handleClick={handleClick}\n          sortBy={sortBy}\n        />\n        <TableContent countriesList={countries} />\n      </Table>\n    </TableContainer>\n  )\n}\n\nResultTable.displayName = 'ResultTable'\n\nexport default ResultTable\n","import React from 'react'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport SearchIcon from '@material-ui/icons/Search'\nimport InputBase from '@material-ui/core/InputBase'\n\nimport { secondary } from '../../const'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '65px',\n    display: 'inline-block',\n    '& label.Mui-focused': {\n      color: secondary,\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginTop: '15px',\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n}))\n\ntype SearchBarProps = {\n  search: string\n  handleSearch(even: React.ChangeEvent<HTMLInputElement>): void\n}\nconst SearchBar = ({ search, handleSearch }: SearchBarProps) => {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <div className={classes.search}>\n        <div className={classes.searchIcon}>\n          <SearchIcon />\n        </div>\n        <InputBase\n          value={search}\n          onChange={handleSearch}\n          placeholder=\"Search a country…\"\n          classes={{\n            root: classes.inputRoot,\n            input: classes.inputInput,\n          }}\n          inputProps={{ 'aria-label': 'search' }}\n        />\n      </div>\n    </div>\n  )\n}\n\nSearchBar.displayName = 'SearchBar'\n\nexport default React.memo(SearchBar)\n","import React, { useContext } from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport InvertColorsIcon from '@material-ui/icons/InvertColors'\nimport Button from '@material-ui/core/Button'\n\nimport ThemeContext from '../../contextAPI'\n\nfunction ThemeSwitchBtn() {\n  const { theme, switchTheme } = useContext(ThemeContext)\n  return (\n    <div>\n      <Tooltip title=\"Switch Theme\" aria-label=\"Switch Theme\">\n        <Button\n          id=\"themeSwitchBtn\"\n          style={{ color: theme.color, backgroundColor: theme.background }}\n          onClick={switchTheme}\n        >\n          <InvertColorsIcon />\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\nThemeSwitchBtn.displayName = 'ThemeSwitchBtn'\n\nexport default React.memo(ThemeSwitchBtn)\n","import React from 'react'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Flag from '../Flag'\nimport ThemedButton from '../ThemedButton'\nimport { removeProduct } from '../../redux/actions'\nimport { AppState } from '../../types'\n\nexport const drawerWidth = 550\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  listItemValue: {\n    paddingLeft: '20px',\n  },\n}))\n\nconst InCartList = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const product = useSelector((state: AppState) => state.product.inCart)\n\n  return (\n    <List>\n      {product.map(p => (\n        <ListItem key={p.id}>\n          <ListItemIcon>\n            <Flag flagUrl={p.flagUrl} name={p.name} />\n          </ListItemIcon>\n          <ListItemText className={classes.listItemValue} primary={p.name} />\n          <ThemedButton\n            btnId=\"removeBtn\"\n            onClick={() => dispatch(removeProduct(p))}\n          >\n            Remove\n          </ThemedButton>\n        </ListItem>\n      ))}\n    </List>\n  )\n}\n\nInCartList.displayName = 'InCartList'\n\nexport default React.memo(InCartList)\n","import React, { useCallback } from 'react'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport Drawer from '@material-ui/core/Drawer'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { AppState } from '../../types'\nimport InCartList from '../InCartList'\nimport { toggleDrawer } from '../../redux/actions'\n\nexport const drawerWidth = 550\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n}))\n\nconst RightDrawer = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const drawer = useSelector((state: AppState) => state.drawer.drawerOpen)\n\n  const handleDrawerOpen = useCallback(() => {\n    dispatch(toggleDrawer(!drawer))\n  }, [dispatch, drawer])\n\n  return (\n    <Drawer\n      className={classes.root}\n      variant=\"persistent\"\n      anchor=\"right\"\n      open={drawer}\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n    >\n      <div className={classes.drawerHeader}>\n        <IconButton onClick={handleDrawerOpen}>\n          <ChevronRightIcon />\n        </IconButton>\n      </div>\n      <Divider />\n      <InCartList />\n    </Drawer>\n  )\n}\n\nRightDrawer.displayName = 'RightDrawer'\n\nexport default React.memo(RightDrawer)\n","import React, { useContext, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\nimport Badge from '@material-ui/core/Badge'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport { AppState } from '../../types'\nimport ThemeContext from '../../contextAPI'\nimport { toggleDrawer } from '../../redux/actions'\n\nexport const drawerWidth = 550\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  listItemValue: {\n    paddingLeft: '20px',\n  },\n  shoppingBasketDrawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  shoppingCartButton: {\n    position: 'absolute',\n    right: '10px',\n    top: '13px',\n  },\n  toolBar: {\n    position: 'relative',\n  },\n}))\n\nfunction ShoppingCartBadge() {\n  const classes = useStyles()\n  const product = useSelector((state: AppState) => state.product.inCart)\n  const drawer = useSelector((state: AppState) => state.drawer.drawerOpen)\n  const dispatch = useDispatch()\n  const { theme } = useContext(ThemeContext)\n\n  const handleDrawerOpen = useCallback(() => {\n    dispatch(toggleDrawer(!drawer))\n  }, [dispatch, drawer])\n\n  return (\n    <div className={classes.root}>\n      <Tooltip title=\"Shopping Cart\" aria-label=\"Shopping Cart\">\n        <Button\n          className={classes.shoppingCartButton}\n          onClick={handleDrawerOpen}\n          style={{ color: theme.color, backgroundColor: theme.background }}\n          aria-label=\"cart\"\n        >\n          <Badge badgeContent={product.length} color=\"secondary\">\n            <ShoppingCartIcon />\n          </Badge>\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\nShoppingCartBadge.displayName = 'ShoppingCartBadge'\n\nexport default React.memo(ShoppingCartBadge)\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport RightDrawer from '../RightDrawer'\nimport ShoppingCartBadge from '../ShoppingCartBadge'\n\nexport const drawerWidth = 550\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n}))\n\nfunction ShoppingCartDrawer() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <ShoppingCartBadge />\n      <RightDrawer />\n    </div>\n  )\n}\nShoppingCartDrawer.displayName = 'ShoppingCartDrawer'\n\nexport default React.memo(ShoppingCartDrawer)\n","import React, { useContext } from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Button from '@material-ui/core/Button'\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports'\n\nimport ThemeContext from '../../contextAPI'\n\nfunction GameBtn() {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <div>\n      <Tooltip title=\"Feature In Progress\" aria-label=\"Play Quizz Games\">\n        <Button\n          style={{ color: theme.color, backgroundColor: theme.background }}\n          id=\"GameBtn\"\n        >\n          <SportsEsportsIcon />\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\nGameBtn.displayName = 'GameBtn'\n\nexport default React.memo(GameBtn)\n","import React, { useContext, FunctionComponent } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\n\nimport ThemeSwitchBtn from '../ThemeSwitchBtn'\nimport ShoppingCartDrawer from '../ShoppingCartDrawer'\nimport ThemeContext from '../../contextAPI'\nimport GameBtn from '../GameBtn'\n\nexport const drawerWidth = 550\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n}))\n\nconst MyAppBar: FunctionComponent = ({ children }) => {\n  const classes = useStyles()\n  const { theme } = useContext(ThemeContext)\n\n  return (\n    <AppBar\n      style={{ backgroundColor: theme.background, color: theme.color }}\n      position=\"fixed\"\n      className={clsx(classes.root)}\n    >\n      <Toolbar>\n        <GameBtn />\n        <ThemeSwitchBtn />\n        {children}\n        <ShoppingCartDrawer />\n      </Toolbar>\n    </AppBar>\n  )\n}\nMyAppBar.displayName = 'MyAppBar'\n\nexport default MyAppBar\n","import React from 'react'\n\nimport SearchBar from '../SearchBar'\nimport MyAppBar from '../MyAppBar'\n\nexport const drawerWidth = 550\ntype Props = {\n  search: string\n  handleChange(event: React.ChangeEvent<HTMLInputElement>): void\n}\nfunction NavBar({ search, handleChange }: Props) {\n  return (\n    <MyAppBar>\n      <SearchBar search={search} handleSearch={handleChange} />\n    </MyAppBar>\n  )\n}\nNavBar.displayName = 'NavBar'\n\nexport default NavBar\n","import { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isEmpty, sortBy as sortFunc } from 'lodash'\n\nimport { AppState, Country, SingleHeader } from '../types'\nimport { fetchCountries } from '../redux/actions'\n\ntype UseFetchProps = {\n  sortedAsc: boolean\n  sortBy: SingleHeader\n  search: string\n}\n\nexport default function useFetch({ sortedAsc, sortBy, search }: UseFetchProps) {\n  const [filteredCountries, setFilteredCountries] = useState<Country[]>([])\n  const dispatch = useDispatch()\n  const data = useSelector((state: AppState) => state.countriesList)\n  useEffect(() => {\n    if (isEmpty(data.countries)) {\n      dispatch(fetchCountries())\n    }\n  }, [dispatch, data])\n\n  useEffect(() => {\n    // Filtering\n    let filteredData = data.countries.filter((c) =>\n      c.name.toLowerCase().includes(search.toLowerCase())\n    )\n    // Sorting\n    if (sortBy && sortedAsc) {\n      setFilteredCountries(sortFunc(filteredData, sortBy))\n    } else if (sortBy && !sortedAsc) {\n      setFilteredCountries(sortFunc(filteredData, sortBy).reverse())\n    }\n  }, [sortedAsc, sortBy, search, data])\n  return filteredCountries\n}\n","import { Dispatch } from 'redux'\n\nimport {\n  FETCH_COUNTRIES_PENDING,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRIES_ERROR,\n  Country,\n} from '../../types'\n\nexport function fetchCountriesPending() {\n  return {\n    type: FETCH_COUNTRIES_PENDING,\n  }\n}\n\nexport function fetchCountriesSuccess(countries: Country[]) {\n  return {\n    type: FETCH_COUNTRIES_SUCCESS,\n    payload: {\n      countries: countries,\n    },\n  }\n}\n\nexport function fetchCountriesError(error: Error) {\n  return {\n    type: FETCH_COUNTRIES_ERROR,\n    payload: {\n      pending: false,\n      error: error,\n    },\n  }\n}\n\n//Async action processed by redux-thunk middleware\nexport function fetchCountries() {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchCountriesPending())\n    return fetch('https://restcountries.eu/rest/v2/all')\n      .then((resp) => resp.json())\n      .then((myJson) => {\n        dispatch(fetchCountriesSuccess(myJson))\n      })\n      .catch((error) => {\n        dispatch(fetchCountriesError(error))\n      })\n  }\n}\n","import React, { useState, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport ResultTable from '../components/ResultTable'\nimport NavBar from '../components/NavBar'\nimport useFetch from '../hooks/useFetch'\nimport { SingleHeader } from '../types'\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    position: 'relative',\n  },\n  container: {\n    height: '100vh',\n  },\n})\n\nfunction Home() {\n  // React states\n  const [sortedAsc, setSortedAsc] = useState(true)\n  const [search, setSearch] = useState('')\n  const [sortBy, setSortBy] = useState<SingleHeader>('name')\n\n  // API Data fetched by custom hook\n  const filteredCountries = useFetch({ sortedAsc, sortBy, search })\n\n  // Style\n  const classes = useStyles()\n\n  // useCallback prevents TableHeader from re-rendering when search input changes\n  const handleSearch = useCallback((e) => {\n    setSearch(e.target.value)\n  }, [])\n\n  // useCallback prevents SearchBar from re-rendering when header is clicked\n  const handleColumnChange = useCallback(\n    (e) => {\n      if (sortBy === e.target.id) {\n        setSortedAsc(!sortedAsc)\n      } else {\n        setSortBy(e.target.id)\n        setSortedAsc(true)\n      }\n    },\n    [sortBy, sortedAsc]\n  )\n\n  return (\n    <div className={classes.container}>\n      <NavBar search={search} handleChange={handleSearch} />\n      <ResultTable\n        countries={filteredCountries}\n        sortedAsc={sortedAsc}\n        sortBy={sortBy}\n        handleClick={handleColumnChange}\n      />\n    </div>\n  )\n}\n\nHome.displayName = 'Home'\n\nexport default React.memo(Home)\n","import React, { FunctionComponent, useContext } from 'react'\nimport Chip from '@material-ui/core/Chip'\n\nimport ThemeContext from '../../contextAPI'\n\ntype Props = {\n  label: string\n}\nconst ThemedChip: FunctionComponent<Props> = ({ label }) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <Chip\n      label={label}\n      style={{ color: theme.buttonColor, textDecoration: 'none' }}\n    />\n  )\n}\n\nThemedChip.displayName = 'ThemedChip'\n\nexport default ThemedChip\n","import React, { useContext, useCallback } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Container from '@material-ui/core/Container'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List'\nimport HomeIcon from '@material-ui/icons/Home'\nimport ThemeContext from '../contextAPI'\nimport Grid from '@material-ui/core/Grid'\nimport { Button } from '@material-ui/core'\nimport Avatar from '@material-ui/core/Avatar'\nimport Chip from '@material-ui/core/Chip'\nimport _ from 'lodash'\n\nimport ThemedChip from '../components/ThemedChip'\nimport MyAppBar from '../components/MyAppBar'\nimport { AppState } from '../types'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'relative',\n    flexGrow: 1,\n    maxHeight: '100vh',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  container: {\n    margin: '90px auto',\n    maxHeight: '100vh',\n  },\n  upperCard: {\n    minHeight: '45vh',\n    width: '100%',\n    marginTop: '10px',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  media: {\n    width: '100%',\n    height: 'auto',\n    paddingTop: '56.25%', // 16:9\n  },\n  upperPaper: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  lowerPaper: {\n    minHeight: '10vh',\n  },\n  lowerCard: {},\n}))\n\nfunction Country() {\n  const classes = useStyles()\n  const { theme } = useContext(ThemeContext)\n  const { alpha3Code } = useParams()\n  const history = useHistory()\n  const country = useSelector((state: AppState) =>\n    state.countriesList.countries.find(c => c.alpha3Code === alpha3Code)\n  )\n  const countries = useSelector((state: AppState) =>\n    state.countriesList.countries.map(c => {\n      return {\n        flag: c.flag,\n        name: c.name,\n        alpha3Code: c.alpha3Code,\n      }\n    })\n  )\n\n  const handleGoBack = useCallback(() => history.goBack(), [history])\n\n  if (!country) {\n    return (\n      <>\n        <MyAppBar>\n          <Button\n            style={{ backgroundColor: theme.background, color: theme.color }}\n            onClick={handleGoBack}\n          >\n            <HomeIcon /> GO BACK\n          </Button>\n        </MyAppBar>\n        <div>Country not found</div>\n      </>\n    )\n  }\n  return (\n    <div className={classes.root}>\n      <MyAppBar>\n        <Button\n          style={{ backgroundColor: theme.background, color: theme.color }}\n          onClick={handleGoBack}\n        >\n          <HomeIcon /> GO BACK\n        </Button>\n      </MyAppBar>\n      <Container className={classes.container}>\n        <Grid container spacing={6}>\n          <Grid item xs>\n            <Paper className={classes.upperPaper}>\n              <Card className={classes.upperCard}>\n                <CardHeader subheader=\"Capital\" title={country.capital} />\n                <CardHeader\n                  subheader=\"Native Name\"\n                  title={country.nativeName}\n                />\n                <CardHeader subheader=\"Region\" title={country.region} />\n                <CardHeader subheader=\"Sub Region\" title={country.subregion} />\n              </Card>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper className={classes.upperPaper}>\n              <Card className={classes.upperCard}>\n                <CardHeader title={country.name} />\n                <CardMedia\n                  className={classes.media}\n                  image={country.flag}\n                  title={country.name}\n                />\n                <CardHeader\n                  subheader=\"Area\"\n                  title={`${country.area.toLocaleString()} square kilometers`}\n                />\n              </Card>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper className={classes.upperPaper}>\n              <Card className={classes.upperCard}>\n                <CardHeader\n                  subheader=\"Population\"\n                  title={country.population.toLocaleString()}\n                />\n                <div>\n                  {country.currencies.map(c => {\n                    return (\n                      <Chip\n                        icon={<Avatar>{c.symbol}</Avatar>}\n                        label={c.name}\n                        color=\"secondary\"\n                      />\n                    )\n                  })}\n                </div>\n                <CardHeader\n                  subheader=\"Currency Code\"\n                  title={_.first(country.currencies.map(c => c.code))}\n                />\n                <CardHeader\n                  subheader=\"Currency Name\"\n                  title={_.first(country.currencies.map(c => c.name))}\n                />\n                <CardHeader\n                  subheader=\"Currency Symbol\"\n                  title={_.first(country.currencies.map(c => c.symbol))}\n                />\n              </Card>\n            </Paper>\n          </Grid>\n        </Grid>\n        <Grid spacing={3}>\n          <Grid item xs>\n            <Paper className={classes.lowerPaper}>\n              <Card className={classes.lowerCard}>\n                <CardContent>\n                  <Typography className={classes.pos} variant=\"h6\">\n                    Languages\n                  </Typography>\n                  <List>\n                    {country.languages.map(l => {\n                      return <ThemedChip label={l.name} />\n                    })}\n                  </List>\n                </CardContent>\n              </Card>\n            </Paper>\n          </Grid>\n        </Grid>\n        <Grid spacing={3}>\n          <Grid item xs>\n            <Paper className={classes.lowerPaper}>\n              <Card className={classes.lowerCard}>\n                <CardContent>\n                  <Typography className={classes.pos} variant=\"h6\">\n                    Neighbors\n                  </Typography>\n                  <List>\n                    {!country.borders && (\n                      <Typography variant=\"subtitle1\">\n                        This country has no neighbors.\n                      </Typography>\n                    )}\n                    {country.borders\n                      .map(code =>\n                        countries.find(country => country.alpha3Code === code)\n                      )\n                      .map(country => (\n                        <Chip\n                          avatar={\n                            <Avatar alt={country?.name} src={country?.flag} />\n                          }\n                          label={country?.name}\n                          variant=\"outlined\"\n                        />\n                      ))}\n                  </List>\n                </CardContent>\n              </Card>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  )\n}\n\nCountry.displayName = 'Country'\n\nexport default React.memo(Country)\n","import React /*{ useState }*/ from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\n///Empty lines before personal component imports\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}))\n\ntype Props = {\n  content: string\n}\nconst Options = ({ content }: Props) => {\n  //logic\n  const classes = useStyles()\n  return (\n    <Grid item xs={3}>\n      <Paper className={classes.paper}>{content}</Paper>\n    </Grid>\n  )\n}\n\nOptions.displayName = 'Options'\n\nexport default Options\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\n\n///Empty lines before personal component imports\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}))\n\ntype Props = {\n  content: string\n}\nconst Quizz = ({ content }: Props) => {\n  //logic\n\n  const classes = useStyles()\n  return (\n    <Grid item xs={12}>\n      <Paper className={classes.paper}>{content}</Paper>\n    </Grid>\n  )\n}\n\nQuizz.displayName = 'Quizz'\n\nexport default Quizz\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\n\nimport Options from '../Options'\nimport Quizz from '../Quizz'\nimport { QuizzType, OptionType } from '../../gameTypes'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}))\n\ntype Props = {\n  quizz: QuizzType\n  option1: OptionType\n  option2: OptionType\n  option3: OptionType\n  option4: OptionType\n}\nconst QuizzAndOptions = ({\n  quizz,\n  option1,\n  option2,\n  option3,\n  option4,\n}: Props) => {\n  //logic\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Quizz content={quizz} />\n        <Options content={option1} />\n        <Options content={option2} />\n        <Options content={option3} />\n        <Options content={option4} />\n      </Grid>\n    </div>\n  )\n}\n\nQuizzAndOptions.displayName = 'QuizzAndOptions'\n\nexport default QuizzAndOptions\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport _ from 'lodash'\n\nimport { OptionType, QuizzType } from '../gameTypes'\nimport QuizzAndOptions from '../quizzGameComponents/QuizzAndOptions'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}))\n\nconst QuizzGame = () => {\n  const classes = useStyles()\n  const [quizz, setQuizz] = useState<QuizzType>('haha?')\n  const [correct, setCorrect] = useState<OptionType>('Correct')\n  const [incorrect1, setIncorrect1] = useState<OptionType>('Incorrect1')\n  const [incorrect2, setIncorrect2] = useState<OptionType>('Incorrect2')\n  const [incorrect3, setIncorrect3] = useState<OptionType>('Incorrect3')\n  let options: OptionType[] = [correct, incorrect1, incorrect2, incorrect3]\n  let shuffledOptions = _.shuffle(options)\n  setQuizz('')\n  setCorrect('')\n  setIncorrect1('')\n  setIncorrect2('')\n  setIncorrect3('')\n  return (\n    <div className={classes.root}>\n      <QuizzAndOptions\n        quizz={quizz}\n        option1={shuffledOptions[1]}\n        option2={shuffledOptions[2]}\n        option3={shuffledOptions[3]}\n        option4={shuffledOptions[0]}\n      />\n    </div>\n  )\n}\nQuizzGame.displayName = 'QuizzGame'\n\nexport default QuizzGame\n","import React, { useState } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport random from 'lodash/random'\n\nimport Home from './pages/Home'\nimport Country from './pages/Country'\nimport QuizzGame from './pages/QuizGame'\nimport ThemeContext, { themes } from './contextAPI'\n\nconst Routes = () => {\n  // Switch Theme randomly\n  const [context, setContext] = useState({\n    theme: themes[1],\n    switchTheme: () => {\n      const randomTheme = themes[random(0, 5)]\n      setContext((current) => ({\n        ...current,\n        theme: randomTheme,\n      }))\n    },\n  })\n\n  return (\n    <ThemeContext.Provider value={context}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/countries/:alpha3Code\" component={Country} />\n        <Route exact path=\"/quizzgame\" component={QuizzGame} />\n      </Switch>\n    </ThemeContext.Provider>\n  )\n}\nexport default Routes\n","import React from 'react'\n\nimport Routes from './Routes'\n\nexport default function App() {\n  return (\n    <>\n      <Routes />\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable indent */\nimport {\n  ProductState,\n  ProductActions,\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n} from '../../types'\n\nexport default function product(\n  state: ProductState = {\n    inCart: [],\n  },\n  action: ProductActions\n): ProductState {\n  switch (action.type) {\n    case ADD_PRODUCT: {\n      const { product } = action.payload\n      if (state.inCart.find(p => p.id === product.id)) {\n        return state\n      }\n      // Always return new state (e.g, new object) if changed\n      return { ...state, inCart: [...state.inCart, product] }\n    }\n\n    case REMOVE_PRODUCT: {\n      const { product } = action.payload\n      const index = state.inCart.findIndex(p => p.id === product.id)\n      if (index >= 0) {\n        state.inCart.splice(index, 1)\n        return { ...state, inCart: [...state.inCart] }\n      }\n      return state\n    }\n\n    default:\n      return state\n  }\n}\n","/* eslint-disable indent */\nimport { TOGGLE_DRAWER, ToggleDrawerAction, DrawerState } from '../../types'\n\nconst defaultState: DrawerState = {\n  drawerOpen: false,\n}\n\nexport default function drawer(\n  state: DrawerState = defaultState,\n  action: ToggleDrawerAction\n): DrawerState {\n  switch (action.type) {\n    case TOGGLE_DRAWER: {\n      return {\n        ...state,\n        drawerOpen: !state.drawerOpen,\n      }\n    }\n    default:\n      return state\n  }\n}\n","/* eslint-disable indent */\nimport {\n  CountryState,\n  CountryActions,\n  FETCH_COUNTRIES_ERROR,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRIES_PENDING,\n} from '../../types'\n\nexport default function product(\n  state: CountryState = {\n    pending: false,\n    countries: [],\n    error: '',\n  },\n  action: CountryActions\n): CountryState {\n  switch (action.type) {\n    case FETCH_COUNTRIES_PENDING:\n      return {\n        ...state,\n        pending: true,\n      }\n    case FETCH_COUNTRIES_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        countries: action.payload.countries,\n      }\n    case FETCH_COUNTRIES_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.payload.error,\n      }\n    default:\n      return state\n  }\n}\n\n// export const getCountries = (state: CountryState) => state.countries;\n// export const getCountriesPending = (state: CountryState) => state.pending;\n// export const getCountriesError = (state: CountryState) => state.error;\n","import { combineReducers } from 'redux'\n\nimport product from './product'\nimport drawer from './drawer'\nimport countriesList from './country'\n\nconst createRootReducer = () =>\n  combineReducers({\n    product,\n    drawer,\n    countriesList,\n  })\n\nexport default createRootReducer\n","import { takeLatest, select, put } from 'redux-saga/effects'\n\nimport {} from '../../types'\nimport { toggleDrawer } from '../actions'\n\nfunction* saveState() {\n  const state = yield select()\n  yield localStorage.setItem('state', JSON.stringify(state))\n}\n\nfunction* closeDrawer() {\n  const state = yield select()\n  if (state.product.inCart.length === 0) {\n    yield put(toggleDrawer(false))\n  }\n}\n\nexport default [\n  takeLatest('*', saveState),\n  takeLatest('REMOVE_PRODUCT', closeDrawer),\n]\n","import { all } from 'redux-saga/effects'\n\nimport productSagas from './product'\n\nexport default function* rootSaga() {\n  yield all([...productSagas])\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport thunk from 'redux-thunk'\n\nimport { AppState } from '../types'\nimport createRootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst initState: AppState = {\n  countriesList: {\n    pending: true,\n    countries: [],\n    error: '',\n  },\n  drawer: {\n    drawerOpen: false,\n  },\n  product: {\n    inCart: [],\n  },\n  ui: {\n    dialogOpen: {},\n  },\n}\n\nexport default function makeStore(initialState = initState) {\n  const sagaMiddleware = createSagaMiddleware()\n  const middlewares = [sagaMiddleware, thunk]\n  let composeEnhancers = compose\n\n  if (process.env.NODE_ENV === 'development') {\n    if ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    }\n  }\n  if (localStorage) {\n    initialState = JSON.parse(localStorage.getItem('state') || '{}')\n  }\n  const store = createStore(\n    createRootReducer(),\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares))\n  )\n\n  sagaMiddleware.run(rootSaga)\n\n  if ((module as any).hot) {\n    ;(module as any).hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers').default\n      store.replaceReducer(nextReducer)\n    })\n  }\n\n  return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport makeStore from './redux/store'\n\nconst store = makeStore()\n\nconst WithProvider = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n)\n\nReactDOM.render(<WithProvider />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}